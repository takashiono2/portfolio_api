class UsersController < ApplicationController
  before_action :set_user, only: [:show, :edit,:destroy,:update,:edit_basic_info,:confirm_approval,:update_basic_info,:csv_index] 
  before_action :logged_in_user, only: [:edit, :index,:destroy, :edit_basic_info, :update_basic_info,:approval_work_info_update,:index_attendance,:show]#この中に入れていると入れなくなる,:update
  before_action :correct_user, only: [:approval_work_info_update,:edit_basic_info,:edit]#この中に入れていると入れなくなる:show,
  before_action :admin_user, only: [:destroy,:edit_basic_info, :update_basic_info,:index_attendance,:index]#,管理者でなければ入れない,:update
  before_action :set_one_month, only: [:show, :confirm_approval,:csv_index]
  #before_action :admin_user_exit,only: [:show]#管理者は入れない
  before_action :self_user,only: [:show]
  
  def index
    @users = User.all
    @user = User.find(current_user.id)
  end

  def show
    #@worked_sum = @attendances.where.not(started_at: nil).count#@attendancesの出勤がnilではないものをとってきてカウント
    @worked_sum = @attendances.where.not(keiko_place: nil).count#各々月の合計
    @worked_sums = @user.attendances.where.not(keiko_place: nil).count#総数
###########以下、chart.jsの表示変数
    @month=[]
    (1..12).each do |num|  
      @month << "#{num}月"
    end
###########以下、chart.jsの表示変数
if params[:date].nil? || (params[:date].to_date.strftime('%Y') == Date.current.strftime('%Y'))
    #@worked_sums_1 = @user.attendances.where("worked_on Like?", "%Date.current.strftime('%Y-01')%").where.not(keiko_place: nil).count
    @worked_sum9 = []
    (1..9).each do |i|
       #@worked_sum9 << "#{@user.attendances.where("worked_on LIKE?", "%#{Date.current.strftime('%Y-'"0#{i}")}%").where.not(keiko_place: nil).count}"
       @worked_sum9 << "#{@user.attendances.where("cast(worked_on as text) LIKE?", "%#{Date.current.strftime('%Y-'"0#{i}")}%").where.not(keiko_place: nil).count}"
       #@worked_sum9 << "%#{Date.current.strftime('%Y-'"0#{i}")}%"
    end
    
    @worked_sum12 = []
    (10..12).each do |i|
      #@worked_sum12 << "#{@user.attendances.where("worked_on LIKE?", "%#{Date.current.strftime('%Y-'"#{i}")}%").where.not(keiko_place: nil).count}"
      @worked_sum12 << "#{@user.attendances.where("cast(worked_on as text) LIKE?", "%#{Date.current.strftime('%Y-'"#{i}")}%").where.not(keiko_place: nil).count}"
      #@worked_sum12 << "%#{Date.current.strftime('%Y-'"#{i}")}%"
    end
    
    @worked_sum_month = @worked_sum9.concat(@worked_sum12)#配列を結合
elsif (params[:date].to_date.strftime('%Y') != Date.current.strftime('%Y'))
    @worked_sum9 = []
      (1..9).each do |i|
      @worked_sum9 << "#{@user.attendances.where("cast(worked_on as text) LIKE?", "%#{params[:date].to_date.strftime('%Y-'"0#{i}")}%").where.not(keiko_place: nil).count}"
      #worked_sum9 << "#{@user.attendances.where("worked_on LIKE?", "%#{params[:date].to_date.strftime('%Y-'"0#{i}")}%").where.not(keiko_place: nil).count}"
    end
    
    @worked_sum12 = []
      (10..12).each do |i|
      #@worked_sum12 << "#{@user.attendances.where("worked_on LIKE?", "%#{params[:date].to_date.strftime('%Y-'"#{i}")}%").where.not(keiko_place: nil).count}"
      @worked_sum12 << "#{@user.attendances.where("cast(worked_on as text) LIKE?"::text, "%#{params[:date].to_date.strftime('%Y-'"#{i}")}%").where.not(keiko_place: nil).count}"
    end

    @worked_sum_month = @worked_sum9.concat(@worked_sum12)#配列を結合
end
    #@worked_sums_6 = @user.attendances.where.not(keiko_place: nil).where(worked_on: Jun 2020).count#総数
    #@worked_sums_6 = User.find(2).attendances.where("worked_on Like?", "%2020-06%").where.not(keiko_place: nil).count
#Date.current.strftime('%Y-%m')#=>"2020-07"
#params[:date].to_date.strftime('%Y/%m/%d')=>"2020/06/01"
#params[:date].to_date.strftime('%Y')=>"2020"
###########以下、勤怠編集の件数表示
    @applying_change_id = []
    applying_changes = Attendance.where(edit_applying_approval: "申請中", applying_superior_id: current_user.id)
    applying_changes.each do |applying_change|
      @applying_change_id << applying_change.id
    end
    @applying_change_count = @applying_change_id.size
    #@user_month_superior = User.where.not(month_applying_superior_id: nil).where(superior: true)
###########以下、所属長月申請
    @first_day = params[:date].nil? ? Date.current.beginning_of_month : params[:date].to_date
    if current_user.id == @user.id#確認する人が申請者と同じなら 
      @reports_month = Report.where(user_id: @user.id,month_on: @first_day)#申請の時は、自分のidを紐づける。
        @reports_month.each do |repo|
          @report=Report.find(repo.id)#開いているページの月クラス
        end
    else  
      @reports_month = Report.where.not(user_id: nil).where.not(month_on: @first_day)#申請者が確認する時は、申請した人が複数になる可能性があるので
        @reports_month.each do |repo|
          @report=Report.find(repo.id)#開いているページの月クラス
        end
    end
################以下、所属長月申請の件数
    @report_num= []
      @report_n = Report.where.not(user_id: @user.id).where(month_applying_superior_id: current_user.id)#user_idは自分以外、申請idは自分
        @report_n.each do|report_n|
        @report_num << report_n.id
    end
################以下、所属長名定義
    @reports = Report.where(user_id: @user.id,month_on: @first_day, month_applying_approval: "申請中").where.not(month_applying_superior_id: 0).where.not(month_applying_superior_id: nil)#上長への申請たち
################以下、スケジュールnote編集定義
    #if Attendance.where.not(note: nil)
      @attendances_note = @user.attendances.where(worked_on: @first_day..@last_day,user_id: 1).order(:worked_on)
    #end
  end

  def new
    @user = User.new
  end

  def create
    @user = User.new(user_params)
    if @user.save
      log_in @user
      flash[:success] = '新規作成に成功しました。'
      redirect_to @user
    else
      render :new
    end
  end

  def edit
  end

  def update
    if @user.update_attributes(user_params)
      flash[:success] = "ユーザー情報を更新しました。"
      current_user.admin?? (redirect_to users_url) : (redirect_to @user)
      #redirect_to @user
    else
      render :edit
    end
  end

  def destroy
    @user.destroy
    flash[:success] = "#{@user.name}のデータを削除しました。"
    redirect_to users_url
  end

  def edit_basic_info
    @users = User.all
  end

  def update_basic_info#基本情報の更新
  end

###csv出力
  def csv_index#csv出力
    respond_to do |format|#ファイルの出力処理
      format.html do#html用の処理を書く
      end 
      format.csv do#csv用の処理を書く
        filename = ERB::Util.url_encode("#{@user.name}の#{@first_day.strftime("%Y年%m月")}の勤怠情報一覧.csv")#引数に渡された文字列をURLエンコード
        send_data render_to_string, filename: filename, type: :csv#csvデータに変換し、ダウンロードできる
      end
    end
  end
  
  def csv_import#csvのインポート
    if !params[:file]
      flash[:danger]="ファイルが添付されていません"
      redirect_back(fallback_location: root_path)
    elsif !(params[:file].present? && params[:file].original_filename && File.extname(params[:file].original_filename) == ".csv")
      flash[:danger]="csvファイルを添付してください"
      redirect_back(fallback_location: root_path) and return    
    else
      @lists,@csv_success,@csv_fail_emails,@csv_fail_passes = User.csv_import(params[:file])
      #User.csv_import(params[:file])
      flash[:success] = "#{@lists.count}件中、#{@csv_success.count}件ユーザー情報をインポートしました"
      if  @csv_fail_passes.present? && @csv_fail_emails.present? && (@lists.count != @csv_success.count)
        flash[:danger] = "#{@csv_fail_passes}は、パスワード記入がないので登録できません。#{@csv_fail_emails} は、すでに、登録されているので、登録できません"
      elsif @csv_fail_passes.present? && @csv_fail_emails.blank? && (@lists.count != @csv_success.count)
        flash[:danger] = "#{@csv_fail_passes}は、パスワード記入がないので保存できません."
      elsif @csv_fail_emails.present? && @csv_fail_passes.blank? && (@lists.count != @csv_success.count)
        flash[:danger] = "#{@csv_fail_emails} は、すでに、登録されているので、登録できません"
      end
      redirect_to users_url and return
    end
  end

####################
  def confirm_approval#申請確認時
    @attendance = Attendance.find(params[:id])#Attendanceのid
    @user = User.find(params[:id])
    @overtime_sum = Attendance.where(approval: 1).where.not(superior_id: nil) #上長に承認申請したattendanceたち
    @overtime_sum1 = @overtime_sum.pluck(:superior_id)#attendanceたちの中からsuperior_idを取り出す
    @a=[]
    @overtime_sum1.each do |overtime_sum1|
      if current_user.id == overtime_sum1
        @a << overtime_sum1#上長のid
      end
    end
    @worked_sum = @attendances.where.not(started_at: nil).count

    @reports = Report.where(user_id: @user.id,month_on: @first_day, month_applying_approval: "申請中").where.not(month_applying_superior_id: nil)#上長への申請たち
    @first_day = params[:date].nil? ? Date.current.beginning_of_month : params[:date].to_date
    @reports_month = Report.where.not(user_id: nil).where(month_on: @first_day,month_applying_approval: "申請中")
      @reports_month.each do |repo|
        @report=Report.find(repo.id)#開いているページの月クラス
      end

    render action: :show
  end

###出席ページ
  def index_attendance
    #@users = User.all
#binding.pry
    if params[:user].blank?
      #@users = User.all
      @users = User.all.where.not(admin: true)
      #@users = User.where.not(admin: true)
    elsif params[:user].present? && params[:user]["name"].blank?
      @users = User.where(affiliation: params[:user]["affiliation"],department: params[:user]["department"])
    elsif params[:user]["name"].present?
      @users = User.where('name LIKE ?', "%#{params[:user]["name"]}%")
    else
      @users = User.where.not(admin: true)
    end
  end

###出席モーダルページ表示
  def join
    @user = User.find(params[:id])
  end
###モーダルで出席登録ボタンを押したら
  def join_create
    @user = User.find(params[:id])
    attendance_ids = Attendance.where(user_id: @user.id,worked_on: Date.today).ids
#binding.pry
    attendance = Attendance.find(attendance_ids[0])
    #@attendance = Attendance.find(Attendance.where(user_id: @user.id,worked_on: Date.today).ids)
    attendance.update_attributes!(join_params)
    flash[:success]="#{@user.name}さんの #{params["keiko_place"]} の #{params["attendance_class"]} を出席登録しました。"
    redirect_to index_attendance_users_url
  end
    
  # def update_join
  #   ActiveRecord::Base.transaction do
  #     update_join_params.each do |id, item|
  #       attendance = Attendance.find(id)#id=83が欲しい
  #       attendance.update_attributes!(item)
  #     end
  #   end
  #     flash[:success] = "勤怠編集を申請しました。"
  #     redirect_to user_url(date: params[:date])#問題なかった時の処理。キーをdateとしたパラメータのurlへ
  # rescue ActiveRecord::RecordInvalid# トランザクションによるエラーの分岐です。
  #   flash[:danger] = "無効な入力データがあった為、申請をキャンセルしました"#例外処理
  #   redirect_to user_url(date: params[:date]) and return
  # end
  
  private

    def user_params
      #params.require(:user).permit(:name, :email, :affiliation, :password, :password_confirmation, :employee_number, :job_id, :designated_work_start_time, :designated_work_end_time, :uid, :superior, :basic_work_time, :admin, :department,:status,:registration_day)
      params.require(:user).permit(:name, :email,:uid,:affiliation,:department,:registration_day,:status,:gender,:password, :password_confirmation)
    end

    #def basic_info_params#残業申請の返事
      #params.require(:attendance).permit(:schedule_overtime,:work_content,:next_day,:approval,:superior_id)
    #end

    # ログイン済みのユーザーか確認します。
    def logged_in_user
      unless logged_in?
        store_location
        flash[:danger] = "ログインしてください。"
        redirect_to login_url
      end
    end

    def confirm_approval_params
      params.require(:user).permit(attendances: [:started_at, :finished_at, :note])[:attendances]
    end

    def month_apply_params
      params.require(:report).permit(:month_on,:month_applying_superior_id)
    end

    def join_params
      #params.require(:user).permit(attendances: [:affiliation,:keiko_place])[:attendances]
      #params.require(:attendances).permit(:affiliation,:keiko_place)
      params.permit(:attendance_class,:keiko_place)
    end
end